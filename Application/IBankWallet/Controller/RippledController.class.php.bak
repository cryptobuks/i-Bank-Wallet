<?php

namespace Wallet\Controller;

// use Wallet\Model\WalletModel;
use think\Controller;
use think\Request;
use Wallet\Controller\XRP\Client;


class RippledController extends Controller
{
    protected $client;
    protected $wallet;

    public function __construct() {
        $this->client = new Client('http://127.0.0.1:5005');
        //$this->client = new Client(array('endpoint'=>array('host'=>'127.0.0.1','port'=>5005)));
        // $this->wallet = new WalletModel;
    }
    //
    public function index()
    {
        return 'hello, Rippled';
    }
    // 加密 用chacha20加密算法
    public function encrypted_seed($seed, $password)
    {
        return $seed;
    }

    // 测试数据库操作
    public function walletUpdate($account, $master_seed, $password, $public_key, $sec_type)
    {
        $encryptedSeed = $this->encrypted_seed($master_seed, $password);
        $list = [
            ['account_id'=>$account,'master_seed'=>$encryptedSeed, 'public_key'=>$public_key, 'key_type'=>$sec_type],
        ];
        var_dump($list);
        // $result=$this->wallet->saveAll($list);

        if ($result) {
            //设置成功后跳转页面的地址，默认的返回页面是$_SERVER['HTTP_REFERER']
            //$this->success('新增成功');
            return 'update success';
        } else {
            //错误页面的默认跳转页面是返回前一页，通常不需要设置
            //$this->error('新增失败');
            return 'update failed';
        }
    }


    /**
     * 生成账户
     *
     * @param string $blob_id
     * @return array {\"Account\":\"\",\"master_seed\":\"\",\"public_key\":\"\",\"key_type\":\"\"}","errorCode":0,"errorMessage":""}
     * @throws \Exception
     */
    public function gen_wallet($passphrase)
    {
        /*
        {
    "result": {
        "account_id": "rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh",
        "key_type": "secp256k1",
        "master_key": "I IRE BOND BOW TRIO LAID SEAT GOAL HEN IBIS IBIS DARE",
        "master_seed": "snoPBrXtMeMyMHUVTgbuqAfg1SUTb",
        "master_seed_hex": "DEDCE9CE67B451D852FD4E846FCDE31C",
        "public_key": "aBQG8RQAzjs1eTKFEAQXr2gS4utcDiEC9wmi7pfUPTi27VCahwgw",
        "public_key_hex": "0330E7FC9D56BB25D6893BA3F317AE5BCF33B3291BD63DB32654A313222F7FD020",
        "status": "success"
         }
        }
         */
        $response = $this->client->send('wallet_propose', ["passphrase" => $passphrase]);
        if ($response->isSuccess()) {
            $data = $response->getResult();
            var_dump($data);
            $rst = array("Account" => $data["account_id"],
                "master_seed" => $data["master_seed"],
                "public_key"=> $data["public_key"],
                "key_type" => $data["key_type"] );
            return new Result(0, "", $rst);
        }

        return new Result($response->getErrorCode(), $response->getErrorMessage(), null);
    }

    /**
     * 签名
     *
     * @param string $from, to , secret, amount, fee, destinationTag
     * @return array {"blob_id" => "", "errorCode" => 0, "errorMessage" => ""}
     * @throws \Exception
     */
    function prepare_payment( $from, $to, $secret, $amount, $fee, $destinationTag) {
        $response = $this->client->send('sign', [
            "secret" => $secret,"tx_json" => array( "Account" => $from,
            "Fee" => $fee,
            "Amount" => $amount,
            "Destination" => $to,
            "TransactionType" => "Payment",
            "DestinationTag" => $destinationTag)]);
        if ($response->isSuccess()) {
            $data = $response->getResult();
            $rst = array("blob_id" => $data["tx_blob"]);
            return new Result(0, "", $rst);
        }

        return new Result($response->getErrorCode(), $response->getErrorMessage(), null);
    }

    /**
     * 提交交易
     *
     * @param string $blob_id
     * @return array {"tx_id" => ""}
     * @throws \Exception
     */
    function submit_tx($blob_id) {
        $response= $this->client->send('submit', [
            "tx_blob" => $blob_id
        ]);
        if ($response->isSuccess()) {
            $data = $response->getResult();
            var_dump($data);
            $rst = array("tx_id" => $data["tx_json"]["hash"]);
            return new Result(0, "", $rst);
        }

        return new Result($response->getErrorCode(), $response->getErrorMessage(), null);
    }

    /**
     * 获取账户余额
     *
     * @param string $account
     * @return array {"Balance" => 1, "Account" => ""}
     * @throws \Exception
     */
    public function get_balance($account)
    {
        $response = $this->client->send('account_info', [
            'account' => $account
        ]);
        if ($response->isSuccess()) {
            $data = $response->getResult();
            $rst = array("Balance" => $data["account_data"]["Balance"], "Account" => $data["account_data"]["Account"]);
            return new Result(0, "", $rst);
        }

        return new Result($response->getErrorCode(), $response->getErrorMessage(), null);
    }

    /**
     * set_regular_key 可以设置常规秘钥对，也可以修改常规秘钥对，如果是创建，则secret必须是主账户私钥，
     * 如果是修改，则secret既可以是主账户私钥， 也可以是常规秘钥对的私钥
     *
     * @param string $main_account, $secret, $regular_key
     * @return array {"blob_id" => "aaaaabbbbb"}
     * @throws \Exception
     */
    public function set_regular_key($main_account, $secret, $regular_key)
    {
        $response = $this->client->send('sign', [
            "secret" => $secret,"tx_json" => array( "Account" => $main_account,
            "RegularKey" => $regular_key,
            "TransactionType" => "SetRegularKey"
        )]);

        if ($response->isSuccess()) {
            $data = $response->getResult();
            $rst = array("blob_id" => $data["tx_blob"]);
            return new Result(0, "", $rst);
        }

        return new Result($response->getErrorCode(), $response->getErrorMessage(), null);
    }


    /**
     * remove_regular_key 删除常规秘钥对，tj_json中不需要常规秘钥对账户
     *
     * @param string $main_account, $secret
     * @return array {"raw" => {"blob_id" => "aaaaabbbbb"}, "errorCode" => 0, "errorMessage" => ""}
     * @throws \Exception
     */
    public function remove_regular_key($main_account, $secret)
    {
        $response = $this->client->send('sign', [
            "secret" => $secret,"tx_json" => array( "Account" => $main_account,
            "TransactionType" => "SetRegularKey"
        )]);
        if ($response->isSuccess()) {
            $data = $response->getResult();
            $rst = array("blob_id" => $data["tx_blob"]);
            return new Result(0, "", $rst);
        }

        return new Result($response->getErrorCode(), $response->getErrorMessage(), null);
    }

    /**
     *
     * @param null
     * @return array {"raw" => {"random" => "aaaaabbbbb"}, "errorCode" => 0, "errorMessage" => ""}
     * @throws \Exception
     */
    public function random()
    {
        $response = $this->client->send('random', [ "id" => 1]);
        if ($response->isSuccess()) {
            $data = $response->getResult();
            $rst = array("random" => $data["random"]);
            return new Result(0, "", $rst);
        }

        return new Result($response->getErrorCode(), $response->getErrorMessage(), null);
    }

    /**
     * 查看账户的交易历史
     * @param string account ledger_index_min
     * @return array {"raw":"{\"account\":\"rhaWGhN6dKPJ5ep7FwRpw5jrs7DWywox2g\",
     *                        \"ledger_index_max\":16036359,\"ledger_index_min\":15662540,\"status\":\"success\",
     *                        \"transactions\":[{\"Account\":\"rJabFDqYLJjwJV1bu2pggC2rAQhyaTGbyP\",\"Amount\":\"2000000\",
     *                                           \"Destination\":\"rhaWGhN6dKPJ5ep7FwRpw5jrs7DWywox2g\",\"DestinationTag\":12345,
     *                                           \"hash\":\"1A7DC908842D0A7DAC89FC4565C1BA74E21665886147D1B8ECBBC3FE8C38B03F\",\"Fee\":\"10000\",\"date\":599534911}]}","errorCode":0,"errorMessage":""}
     * @throws \Exception
     */
    public function account_transaction($account, $limit)
    {
        $response = $this->client->send('account_tx', ["account" => $account,
            "ledger_index_min"=>-1, "limit" => $limit,
            "binary" => false, "forward" => true , "ledger_index_max" => -1]);
        if ($response->isSuccess()) {
            $data = $response->getResult();
            $rst = array("account" => $data["account"], "ledger_index_max" => $data["ledger_index_max"],
                "ledger_index_min" => $data["ledger_index_min"], "status" => $data["status"]);
            $transaction = array();
            foreach ($data["transactions"] as $value) {
                $value = $value["tx"];
                $temp_array = array("Account" => $value["Account"], "Amount" => $value["Amount"],
                    "Destination" => $value["Destination"], "DestinationTag" => $value["DestinationTag"],
                    "hash" => $value["hash"], "Fee" => $value["Fee"], "date" => $value["date"]
                );
                $transaction []= $temp_array;

            }
            $rst["transactions"] = $transaction;
            return new Result(0, "", $rst);
        }

        return new Result($response->getErrorCode(), $response->getErrorMessage(), null);
    }

    /**
     *
     * @param string tx_id
     * @return array {"raw" => {"Account" => "", "Amount"=> "", "Destination": "", "DestinationTag":""}, "errorCode" => 0, "errorMessage" => ""}
     * @throws \Exception
     */
    public function get_transaction($tx_id)
    {
        $response = $this->client->send('tx', ["transaction" => $tx_id]);
        if ($response->isSuccess()) {
            $data = $response->getResult();
            var_dump($data);
            $rst = array();
            if ($data["TransactionType"] == "Payment" ) {
                $rst = array("Account" => $data["Account"], "Amount"=> $data["Amount"], "Destination" => $data["Destination"],
                    "DestinationTag" => $data["DestinationTag"]);
            } else if ($data["TransactionType"] == "AccountSet" ) {
                $rst = array("Account" => $data["Account"], "status" => $data["status"]);
            }
            return new Result(0, "", $rst);
        }

        return new Result($response->getErrorCode(), $response->getErrorMessage(), null);
    }


    /**
     *
     * @param string main_account, regular_secret
     * @return array {"raw" => {}, "errorCode" => 0, "errorMessage" => ""}
     * @throws \Exception
     */

    public function verify_regular_key($main_account, $regular_secret)
    {
        $response = $this->client->send('sign', [
            "secret" => $regular_secret,"tx_json" => array( "Account" => $main_account,
            "TransactionType" => "AccountSet"
        )]);
        if ($response->isSuccess()) {
            $data = $response->getResult();
            var_dump($data);
            $rst = array("blob_id" => $data["tx_blob"]);
            return new Result(0, "", $rst);
        }
    }

    // sign sign
    public function verifyRegularKey(Request $req)
    {
        input('?post.regular_secret');
        input('?post.main_account');
        $response = $this->verify_regular_key($req->main_account, $req->regular_secret);
        return json($response);
    }


    public function removeRegularKey(Request $req)
    {
        input('?post.secret');
        input('?post.main_account');
        $response = $this->remove_regular_key($req->main_account, $req->secret);
        if ($response->isSuccess()) {
            $data = $response->getResult();
            return json(new Result(0, "", $data));
        }

        return json(new Result(1, "failed", null));
    }
    // sign sign
    public function sign(Request $req)
    {
        input('?post.secret');
        input('?post.from');
        input('?post.to');
        input('?post.fee');
        input('?post.amount');
        $response = $this->prepare_payment($req->from, $req->to, $req->secret, $req->fee, $req->amount, $req->destinationTag);
        if ($response->getErrorCode() == 0) {
            $txinfo = json_decode($response->getRaw());
            var_dump($txinfo);
            $response = $this->submit_tx($txinfo->blob_id);
            return json($response);
        }
        return json($response);
    }



    public function accountTransaction(Request $req)
    {
        input('?post.account');
        input('?post.ledger_index_min');

        $response = $this->account_transaction($req->account, $req->limit);
        return json($response);

    }

    public function storeWallet(Request $req)
    {
        $passphrase = $this->random($req);
        $req->passphrase = $passphrase["random"];
        $data = $this->gen_wallet($passphrase["random"]);
        var_dump($data);
        // $this->walletUpdate($data["account_id"], $data["master_seed"], "", $data["public_key"], $data["key_type"]);

    }

    public function transaction(Request $req)
    {
        input('?post.tx_id');

        $response = $this->get_transaction($req->tx_id);
        return json($response);

    }

    public function genWallet(Request $req)
    {
        input('?post.passphrase');
        $response = $this->gen_wallet($req->passphrase);
        return json($response);
    }

    public function submit(Request $req) {
        input('?post.blob_id');
        $response = $this->submit_tx($req->blob_id);
        return json($response);
    }

    // getBalance get balance of account
    public function getBalance()
    {
        // $account = I('post.account');
        $account = "rJabFDqYLJjwJV1bu2pggC2rAQhyaTGbyP";
        $response = $this->get_balance($account);
        // return json_encode($response);
        echo json_encode($response);
    }

    public function randomAccount(Request $req)
    {
        $r = $this->random();
        return json($r);
    }

    public function setRegularKey(Request $req)
    {
        input('?post.secret');
        input('?post.main_account');
        input('?post.regular_key');
        $response = $this->set_regular_key($req->main_account, $req->secret, $req->regular_key);
        return json($response);
    }

}
